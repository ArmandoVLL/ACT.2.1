# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1tc-8DcPiqM2ezE6Boc8s1ifd1lB_MImB
"""

"""
           Autor:
   Armando Augusto Valladares Uc
   valladaresarmando301@gmail.com
   Version 2.0 : 10/02/2025 05:00

"""
import numpy as np
import matplotlib.pyplot as plt  # Importamos librerías para cálculos y gráficos

# Definir la función cuya raíz queremos encontrar
def f(x):
    return x**3 - 4.0*x - 9.0  # Función f(x) = x³ - 4x - 9

# Implementación del Método de Bisección
def biseccion(a, b, tol=1e-5, max_iter=100):
    """
    Método numérico de bisección para encontrar una raíz de f(x) en un intervalo [a, b].
    """

    # Verificamos si el método de bisección es aplicable (debe haber un cambio de signo en el intervalo)
    if f(a) * f(b) >= 0:
        print("El método de bisección no es aplicable en el intervalo dado.")
        return None  # Si no hay cambio de signo, el método no se puede aplicar

    # Listas para almacenar los valores de cada iteración
    iteraciones = []
    errores_abs = []
    errores_rel = []
    errores_cua = []
    c_old = a  # Inicializamos la variable para calcular errores

    # Encabezado de la tabla de iteraciones
    print("\nIteraciones del Método de Bisección:")
    print("Iter |       a       |       b       |       c       |      f(c)      |     Error_abs     |     Error_rel     |     Error_cua     ")
    print("-" * 85)

    # Ciclo principal del método de bisección
    for i in range(max_iter):
        c = (a + b) / 2  # Calculamos el punto medio
        iteraciones.append(c)  # Guardamos el valor de la iteración

        # Cálculo de errores
        error_abs = abs(c - c_old)  # Error absoluto
        error_rel = error_abs / c  # Error relativo
        error_cua = (c - c_old) ** 2  # Error cuadrático

        # Guardamos los errores en sus listas
        errores_abs.append(error_abs)
        errores_rel.append(error_rel)
        errores_cua.append(error_cua)

        # Mostramos los valores en cada iteración
        print(f"{i+1:4d} | {a:.8f} | {b:.8f} | {c:.8f} | {f(c):.8f} | {error_abs:.8e} | {error_rel:.8e} | {error_cua:.8e}")

        # Condición de parada: si f(c) es suficientemente pequeña o el error absoluto es menor que la tolerancia
        if abs(f(c)) < tol or error_abs < tol:
            break  # Salimos del bucle si la solución es lo suficientemente precisa

        # Determinamos el nuevo intervalo en función del signo de f(c)
        if f(a) * f(c) < 0:
            b = c  # La raíz está en [a, c]
        else:
            a = c  # La raíz está en [c, b]

        c_old = c  # Actualizamos el valor anterior de c

    return iteraciones, errores_abs, errores_rel, errores_cua  # Retornamos los valores obtenidos

# Parámetros iniciales: definimos el intervalo donde buscamos la raíz
a, b = 2, 3  # Intervalo donde aplicaremos el método de bisección

# Ejecutamos el método de bisección y obtenemos los resultados
iteraciones, errores_abs, errores_rel, errores_cua = biseccion(a, b)

# Crear la figura para visualizar los resultados
fig, ax = plt.subplots(1, 2, figsize=(14, 5))

# Definir el rango de valores para graficar la función
x = np.linspace(a - 1, b + 1, 400)
y = f(x)

# Gráfica de la función y las iteraciones del método
ax[0].plot(x, y, label=r'$f(x) = x^3 - 4x - 9$', color='b')  # Graficamos f(x)
ax[0].axhline(0, color='k', linestyle='--', linewidth=1)  # Línea horizontal en y = 0
ax[0].scatter(iteraciones, [f(c) for c in iteraciones], color='red', label='Iteraciones')  # Puntos de iteraciones
ax[0].set_xlabel('x')
ax[0].set_ylabel('f(x)')
ax[0].set_title("Convergencia del Método de Bisección")
ax[0].legend()
ax[0].grid()  # Mostramos la cuadrícula

# Gráfica de los errores en función de la iteración
ax[1].plot(range(1, len(errores_abs)+1), errores_abs, label="Error Absoluto", marker='o', linestyle='-', color='r')
ax[1].plot(range(1, len(errores_rel)+1), errores_rel, label="Error Relativo", marker='s', linestyle='-', color='b')
ax[1].plot(range(1, len(errores_cua)+1), errores_cua, label="Error Cuadrático", marker='^', linestyle='-', color='y')
ax[1].set_yscale("log")  # Usamos escala logarítmica para visualizar mejor los errores
ax[1].set_xlabel("Iteración")
ax[1].set_ylabel("Errores")
ax[1].set_title("Errores de cada Iteración")
ax[1].legend()
ax[1].grid()  # Mostramos la cuadrícula

# Guardamos la figura generada
plt.savefig("biseccion_convergencia.png", dpi=300)
plt.show()  # Mostramos las gráficas